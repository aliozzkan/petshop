[{"/Volumes/Extreme SSD/myworkspace/petstore/src/index.tsx":"1","/Volumes/Extreme SSD/myworkspace/petstore/src/reportWebVitals.ts":"2","/Volumes/Extreme SSD/myworkspace/petstore/src/App.tsx":"3","/Volumes/Extreme SSD/myworkspace/petstore/src/store/index.ts":"4","/Volumes/Extreme SSD/myworkspace/petstore/src/store/app/reducer.ts":"5","/Volumes/Extreme SSD/myworkspace/petstore/src/store/app/constants.ts":"6","/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/index.ts":"7","/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/api.ts":"8","/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/configuration.ts":"9","/Volumes/Extreme SSD/myworkspace/petstore/src/services/index.ts":"10","/Volumes/Extreme SSD/myworkspace/petstore/src/hooks/fetch-manager.ts":"11","/Volumes/Extreme SSD/myworkspace/petstore/src/store/fetch/reducer.ts":"12","/Volumes/Extreme SSD/myworkspace/petstore/src/hooks/redux-hooks.tsx":"13","/Volumes/Extreme SSD/myworkspace/petstore/src/store/fetch/actions.ts":"14","/Volumes/Extreme SSD/myworkspace/petstore/src/components/templates/Slim.tsx":"15","/Volumes/Extreme SSD/myworkspace/petstore/src/components/organizms/Header.tsx":"16","/Volumes/Extreme SSD/myworkspace/petstore/src/components/pages/Home.tsx":"17","/Volumes/Extreme SSD/myworkspace/petstore/src/components/atoms/DarkModeSwitch/index.js":"18","/Volumes/Extreme SSD/myworkspace/petstore/src/components/organizms/Post.tsx":"19","/Volumes/Extreme SSD/work/garcia/buyback/src/index.tsx":"20","/Volumes/Extreme SSD/work/garcia/buyback/src/reportWebVitals.ts":"21","/Volumes/Extreme SSD/work/garcia/buyback/src/App.tsx":"22","/Volumes/Extreme SSD/work/garcia/buyback/src/components/pages/Home.tsx":"23","/Volumes/Extreme SSD/work/garcia/buyback/src/store/index.ts":"24","/Volumes/Extreme SSD/work/garcia/buyback/src/store/fetch/reducer.ts":"25","/Volumes/Extreme SSD/work/garcia/buyback/src/store/app/reducer.ts":"26","/Volumes/Extreme SSD/work/garcia/buyback/src/store/app/constants.ts":"27","/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/DarkModeSwitch/index.js":"28","/Volumes/Extreme SSD/work/garcia/buyback/src/themes/lightTheme/index.ts":"29","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/Timeline.tsx":"30","/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/GeneralInfo.tsx":"31","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/ShipmentCard.tsx":"32","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/AskCard.tsx":"33","/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/Card.tsx":"34","/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/CopyButton.tsx":"35","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/StatusMonitor.tsx":"36","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/GiftCoupon.tsx":"37","/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/Detail.tsx":"38","/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/ProcessList.tsx":"39","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/ProcessRow.tsx":"40","/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/Process.tsx":"41","/Volumes/Extreme SSD/work/garcia/buyback/src/hooks/text.ts":"42","/Volumes/Extreme SSD/work/garcia/buyback/src/i18n.ts":"43"},{"size":809,"mtime":1611161393949,"results":"44","hashOfConfig":"45"},{"size":425,"mtime":1611087580722,"results":"46","hashOfConfig":"45"},{"size":176,"mtime":1611168921175,"results":"47","hashOfConfig":"45"},{"size":752,"mtime":1611151591581,"results":"48","hashOfConfig":"45"},{"size":415,"mtime":1611089990169,"results":"49","hashOfConfig":"45"},{"size":91,"mtime":1611089234969,"results":"50","hashOfConfig":"45"},{"size":612,"mtime":1611090981018,"results":"51","hashOfConfig":"45"},{"size":82437,"mtime":1611090981014,"results":"52","hashOfConfig":"45"},{"size":1880,"mtime":1611090981015,"results":"53","hashOfConfig":"45"},{"size":564,"mtime":1611159431298,"results":"54","hashOfConfig":"45"},{"size":1586,"mtime":1611153421722,"results":"55","hashOfConfig":"45"},{"size":939,"mtime":1611151520324,"results":"56","hashOfConfig":"45"},{"size":310,"mtime":1611150459053,"results":"57","hashOfConfig":"45"},{"size":521,"mtime":1611150386350,"results":"58","hashOfConfig":"45"},{"size":403,"mtime":1611163018024,"results":"59","hashOfConfig":"45"},{"size":905,"mtime":1611167253444,"results":"60","hashOfConfig":"45"},{"size":299,"mtime":1611175403474,"results":"61","hashOfConfig":"45"},{"size":156,"mtime":1611162512791,"results":"62","hashOfConfig":"45"},{"size":1260,"mtime":1611176107157,"results":"63","hashOfConfig":"45"},{"size":757,"mtime":1612933463313,"results":"64","hashOfConfig":"65"},{"size":425,"mtime":1612932048211,"results":"66","hashOfConfig":"65"},{"size":187,"mtime":1613552983651,"results":"67","hashOfConfig":"65"},{"size":538,"mtime":1613546366372,"results":"68","hashOfConfig":"65"},{"size":752,"mtime":1612932048216,"results":"69","hashOfConfig":"65"},{"size":939,"mtime":1612932048215,"results":"70","hashOfConfig":"65"},{"size":415,"mtime":1612932048214,"results":"71","hashOfConfig":"65"},{"size":91,"mtime":1612932048214,"results":"72","hashOfConfig":"65"},{"size":156,"mtime":1612932048208,"results":"73","hashOfConfig":"65"},{"size":904,"mtime":1613547116401,"results":"74","hashOfConfig":"65"},{"size":2992,"mtime":1613539355270,"results":"75","hashOfConfig":"65"},{"size":1212,"mtime":1613558206676,"results":"76","hashOfConfig":"65"},{"size":1394,"mtime":1613544564081,"results":"77","hashOfConfig":"65"},{"size":618,"mtime":1613539913677,"results":"78","hashOfConfig":"65"},{"size":180,"mtime":1613539965238,"results":"79","hashOfConfig":"65"},{"size":541,"mtime":1613552929642,"results":"80","hashOfConfig":"65"},{"size":1426,"mtime":1613545192621,"results":"81","hashOfConfig":"65"},{"size":665,"mtime":1613545075516,"results":"82","hashOfConfig":"65"},{"size":1322,"mtime":1613553563640,"results":"83","hashOfConfig":"65"},{"size":417,"mtime":1613547508204,"results":"84","hashOfConfig":"65"},{"size":1451,"mtime":1613547395714,"results":"85","hashOfConfig":"65"},{"size":410,"mtime":1613547359654,"results":"86","hashOfConfig":"65"},{"size":321,"mtime":1613552970120,"results":"87","hashOfConfig":"65"},{"size":408,"mtime":1613552055115,"results":"88","hashOfConfig":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"1t4rt15",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"91"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"91"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"91"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},"1df2u5h",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"140"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"140"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"140"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"140"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"/Volumes/Extreme SSD/myworkspace/petstore/src/index.tsx",[],["191","192"],"/Volumes/Extreme SSD/myworkspace/petstore/src/reportWebVitals.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/App.tsx",["193"],"import React, { ReactElement } from \"react\";\nimport FindPet from \"./components/pages/Home\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return <FindPet />;\n}\n\nexport default App;\n","/Volumes/Extreme SSD/myworkspace/petstore/src/store/index.ts",["194"],"import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n// import logger from \"redux-logger\";\nimport { appReducer } from \"./app/reducer\";\nimport { fetchReducer } from \"./fetch/reducer\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst allEnhancers = composeEnhancers(applyMiddleware(thunk));\n\nexport interface Store {\n  app: ReturnType<typeof appReducer>;\n  fetch: ReturnType<typeof fetchReducer>;\n}\n\nexport type store = Store;\nexport const store = createStore(\n  combineReducers({\n    app: appReducer,\n    fetch: fetchReducer\n  }),\n  allEnhancers\n);\n","/Volumes/Extreme SSD/myworkspace/petstore/src/store/app/reducer.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/store/app/constants.ts",["195"],"export const SET_APP_NAME = \"SET_APP_NAME\";\nexport type SET_APP_NAME = typeof SET_APP_NAME;","/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/index.ts",[],["196","197"],"/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/api.ts",["198","199","200","201","202","203","204","205","206","207","208","209","210"],"/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * Swagger Petstore\n * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.5\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nimport * as url from \"url\";\nimport * as portableFetch from \"portable-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"https://petstore.swagger.io/v2\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface ApiResponse\n */\nexport interface ApiResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ApiResponse\n     */\n    code?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiResponse\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiResponse\n     */\n    message?: string;\n}\n\n/**\n * \n * @export\n * @interface Category\n */\nexport interface Category {\n    /**\n     * \n     * @type {number}\n     * @memberof Category\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    name?: string;\n}\n\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    id?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    petId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    quantity?: number;\n    /**\n     * \n     * @type {Date}\n     * @memberof Order\n     */\n    shipDate?: Date;\n    /**\n     * Order Status\n     * @type {string}\n     * @memberof Order\n     */\n    status?: Order.StatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    complete?: boolean;\n}\n\n/**\n * @export\n * @namespace Order\n */\nexport namespace Order {\n    /**\n     * @export\n     * @enum {string}\n     */\n    export enum StatusEnum {\n        Placed = <any> 'placed',\n        Approved = <any> 'approved',\n        Delivered = <any> 'delivered'\n    }\n}\n\n/**\n * \n * @export\n * @interface Pet\n */\nexport interface Pet {\n    /**\n     * \n     * @type {number}\n     * @memberof Pet\n     */\n    id?: number;\n    /**\n     * \n     * @type {Category}\n     * @memberof Pet\n     */\n    category?: Category;\n    /**\n     * \n     * @type {string}\n     * @memberof Pet\n     */\n    name: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Pet\n     */\n    photoUrls: Array<string>;\n    /**\n     * \n     * @type {Array<Tag>}\n     * @memberof Pet\n     */\n    tags?: Array<Tag>;\n    /**\n     * pet status in the store\n     * @type {string}\n     * @memberof Pet\n     */\n    status?: Pet.StatusEnum;\n}\n\n/**\n * @export\n * @namespace Pet\n */\nexport namespace Pet {\n    /**\n     * @export\n     * @enum {string}\n     */\n    export enum StatusEnum {\n        Available = <any> 'available',\n        Pending = <any> 'pending',\n        Sold = <any> 'sold'\n    }\n}\n\n/**\n * \n * @export\n * @interface Tag\n */\nexport interface Tag {\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    name?: string;\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {number}\n     * @memberof User\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    lastName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    phone?: string;\n    /**\n     * User Status\n     * @type {number}\n     * @memberof User\n     */\n    userStatus?: number;\n}\n\n\n/**\n * PetApi - fetch parameter creator\n * @export\n */\nexport const PetApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPet(body: Pet, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling addPet.');\n            }\n            const localVarPath = `/pet`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Pet\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePet(petId: number, apiKey?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'petId' is not null or undefined\n            if (petId === null || petId === undefined) {\n                throw new RequiredError('petId','Required parameter petId was null or undefined when calling deletePet.');\n            }\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            if (apiKey !== undefined && apiKey !== null) {\n                localVarHeaderParameter['api_key'] = String(apiKey);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options: any = {}): FetchArgs {\n            // verify required parameter 'status' is not null or undefined\n            if (status === null || status === undefined) {\n                throw new RequiredError('status','Required parameter status was null or undefined when calling findPetsByStatus.');\n            }\n            const localVarPath = `/pet/findByStatus`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            if (status) {\n                localVarQueryParameter['status'] = status;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByTags(tags: Array<string>, options: any = {}): FetchArgs {\n            // verify required parameter 'tags' is not null or undefined\n            if (tags === null || tags === undefined) {\n                throw new RequiredError('tags','Required parameter tags was null or undefined when calling findPetsByTags.');\n            }\n            const localVarPath = `/pet/findByTags`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPetById(petId: number, options: any = {}): FetchArgs {\n            // verify required parameter 'petId' is not null or undefined\n            if (petId === null || petId === undefined) {\n                throw new RequiredError('petId','Required parameter petId was null or undefined when calling getPetById.');\n            }\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"api_key\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"api_key\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePet(body: Pet, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePet.');\n            }\n            const localVarPath = `/pet`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Pet\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePetWithForm(petId: number, name?: string, status?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'petId' is not null or undefined\n            if (petId === null || petId === undefined) {\n                throw new RequiredError('petId','Required parameter petId was null or undefined when calling updatePetWithForm.');\n            }\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new url.URLSearchParams();\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            if (name !== undefined) {\n                localVarFormParams.set('name', name as any);\n            }\n\n            if (status !== undefined) {\n                localVarFormParams.set('status', status as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            localVarRequestOptions.body = localVarFormParams.toString();\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadFile(petId: number, additionalMetadata?: string, file?: any, options: any = {}): FetchArgs {\n            // verify required parameter 'petId' is not null or undefined\n            if (petId === null || petId === undefined) {\n                throw new RequiredError('petId','Required parameter petId was null or undefined when calling uploadFile.');\n            }\n            const localVarPath = `/pet/{petId}/uploadImage`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new url.URLSearchParams();\n\n            // authentication petstore_auth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n\t\t\t\tconst localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n\t\t\t\t\t? configuration.accessToken(\"petstore_auth\", [\"write:pets\", \"read:pets\"])\n\t\t\t\t\t: configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n            if (additionalMetadata !== undefined) {\n                localVarFormParams.set('additionalMetadata', additionalMetadata as any);\n            }\n\n            if (file !== undefined) {\n                localVarFormParams.set('file', file as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            localVarRequestOptions.body = localVarFormParams.toString();\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PetApi - functional programming interface\n * @export\n */\nexport const PetApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPet(body: Pet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).addPet(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePet(petId: number, apiKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).deletePet(petId, apiKey, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pet>> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByStatus(status, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByTags(tags: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pet>> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByTags(tags, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPetById(petId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Pet> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).getPetById(petId, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePet(body: Pet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePet(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePetWithForm(petId: number, name?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePetWithForm(petId, name, status, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResponse> {\n            const localVarFetchArgs = PetApiFetchParamCreator(configuration).uploadFile(petId, additionalMetadata, file, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * PetApi - factory interface\n * @export\n */\nexport const PetApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPet(body: Pet, options?: any) {\n            return PetApiFp(configuration).addPet(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePet(petId: number, apiKey?: string, options?: any) {\n            return PetApiFp(configuration).deletePet(petId, apiKey, options)(fetch, basePath);\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any) {\n            return PetApiFp(configuration).findPetsByStatus(status, options)(fetch, basePath);\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByTags(tags: Array<string>, options?: any) {\n            return PetApiFp(configuration).findPetsByTags(tags, options)(fetch, basePath);\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPetById(petId: number, options?: any) {\n            return PetApiFp(configuration).getPetById(petId, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePet(body: Pet, options?: any) {\n            return PetApiFp(configuration).updatePet(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePetWithForm(petId: number, name?: string, status?: string, options?: any) {\n            return PetApiFp(configuration).updatePetWithForm(petId, name, status, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any) {\n            return PetApiFp(configuration).uploadFile(petId, additionalMetadata, file, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * PetApi - object-oriented interface\n * @export\n * @class PetApi\n * @extends {BaseAPI}\n */\nexport class PetApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new pet to the store\n     * @param {Pet} body Pet object that needs to be added to the store\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public addPet(body: Pet, options?: any) {\n        return PetApiFp(this.configuration).addPet(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Deletes a pet\n     * @param {number} petId Pet id to delete\n     * @param {string} [apiKey] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public deletePet(petId: number, apiKey?: string, options?: any) {\n        return PetApiFp(this.configuration).deletePet(petId, apiKey, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Multiple status values can be provided with comma separated strings\n     * @summary Finds Pets by status\n     * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any) {\n        return PetApiFp(this.configuration).findPetsByStatus(status, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n     * @summary Finds Pets by tags\n     * @param {Array<string>} tags Tags to filter by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public findPetsByTags(tags: Array<string>, options?: any) {\n        return PetApiFp(this.configuration).findPetsByTags(tags, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Returns a single pet\n     * @summary Find pet by ID\n     * @param {number} petId ID of pet to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public getPetById(petId: number, options?: any) {\n        return PetApiFp(this.configuration).getPetById(petId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Update an existing pet\n     * @param {Pet} body Pet object that needs to be added to the store\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public updatePet(body: Pet, options?: any) {\n        return PetApiFp(this.configuration).updatePet(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Updates a pet in the store with form data\n     * @param {number} petId ID of pet that needs to be updated\n     * @param {string} [name] Updated name of the pet\n     * @param {string} [status] Updated status of the pet\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public updatePetWithForm(petId: number, name?: string, status?: string, options?: any) {\n        return PetApiFp(this.configuration).updatePetWithForm(petId, name, status, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary uploads an image\n     * @param {number} petId ID of pet to update\n     * @param {string} [additionalMetadata] Additional data to pass to server\n     * @param {any} [file] file to upload\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any) {\n        return PetApiFp(this.configuration).uploadFile(petId, additionalMetadata, file, options)(this.fetch, this.basePath);\n    }\n\n}\n\n/**\n * StoreApi - fetch parameter creator\n * @export\n */\nexport const StoreApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOrder(orderId: number, options: any = {}): FetchArgs {\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrder.');\n            }\n            const localVarPath = `/store/order/{orderId}`\n                .replace(`{${\"orderId\"}}`, encodeURIComponent(String(orderId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInventory(options: any = {}): FetchArgs {\n            const localVarPath = `/store/inventory`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"api_key\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"api_key\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrderById(orderId: number, options: any = {}): FetchArgs {\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderById.');\n            }\n            const localVarPath = `/store/order/{orderId}`\n                .replace(`{${\"orderId\"}}`, encodeURIComponent(String(orderId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        placeOrder(body: Order, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling placeOrder.');\n            }\n            const localVarPath = `/store/order`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Order\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * StoreApi - functional programming interface\n * @export\n */\nexport const StoreApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOrder(orderId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).deleteOrder(orderId, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInventory(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: number; }> {\n            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getInventory(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrderById(orderId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {\n            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getOrderById(orderId, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        placeOrder(body: Order, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {\n            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).placeOrder(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * StoreApi - factory interface\n * @export\n */\nexport const StoreApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOrder(orderId: number, options?: any) {\n            return StoreApiFp(configuration).deleteOrder(orderId, options)(fetch, basePath);\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInventory(options?: any) {\n            return StoreApiFp(configuration).getInventory(options)(fetch, basePath);\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrderById(orderId: number, options?: any) {\n            return StoreApiFp(configuration).getOrderById(orderId, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        placeOrder(body: Order, options?: any) {\n            return StoreApiFp(configuration).placeOrder(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * StoreApi - object-oriented interface\n * @export\n * @class StoreApi\n * @extends {BaseAPI}\n */\nexport class StoreApi extends BaseAPI {\n    /**\n     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n     * @summary Delete purchase order by ID\n     * @param {number} orderId ID of the order that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public deleteOrder(orderId: number, options?: any) {\n        return StoreApiFp(this.configuration).deleteOrder(orderId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Returns a map of status codes to quantities\n     * @summary Returns pet inventories by status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public getInventory(options?: any) {\n        return StoreApiFp(this.configuration).getInventory(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n     * @summary Find purchase order by ID\n     * @param {number} orderId ID of pet that needs to be fetched\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public getOrderById(orderId: number, options?: any) {\n        return StoreApiFp(this.configuration).getOrderById(orderId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Place an order for a pet\n     * @param {Order} body order placed for purchasing the pet\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public placeOrder(body: Order, options?: any) {\n        return StoreApiFp(this.configuration).placeOrder(body, options)(this.fetch, this.basePath);\n    }\n\n}\n\n/**\n * UserApi - fetch parameter creator\n * @export\n */\nexport const UserApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');\n            }\n            const localVarPath = `/user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithArrayInput(body: Array<User>, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithArrayInput.');\n            }\n            const localVarPath = `/user/createWithArray`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Array&lt;User&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithListInput(body: Array<User>, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithListInput.');\n            }\n            const localVarPath = `/user/createWithList`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Array&lt;User&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(username: string, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteUser.');\n            }\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserByName(username: string, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling getUserByName.');\n            }\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUser(username: string, password: string, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling loginUser.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling loginUser.');\n            }\n            const localVarPath = `/user/login`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutUser(options: any = {}): FetchArgs {\n            const localVarPath = `/user/logout`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(username: string, body: User, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling updateUser.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');\n            }\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUser(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithArrayInput(body: Array<User>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithArrayInput(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithListInput(body: Array<User>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithListInput(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteUser(username, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserByName(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserByName(username, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUser(username: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).loginUser(username, password, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).logoutUser(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(username: string, body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUser(username, body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options?: any) {\n            return UserApiFp(configuration).createUser(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithArrayInput(body: Array<User>, options?: any) {\n            return UserApiFp(configuration).createUsersWithArrayInput(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithListInput(body: Array<User>, options?: any) {\n            return UserApiFp(configuration).createUsersWithListInput(body, options)(fetch, basePath);\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(username: string, options?: any) {\n            return UserApiFp(configuration).deleteUser(username, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserByName(username: string, options?: any) {\n            return UserApiFp(configuration).getUserByName(username, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUser(username: string, password: string, options?: any) {\n            return UserApiFp(configuration).loginUser(username, password, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutUser(options?: any) {\n            return UserApiFp(configuration).logoutUser(options)(fetch, basePath);\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(username: string, body: User, options?: any) {\n            return UserApiFp(configuration).updateUser(username, body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * This can only be done by the logged in user.\n     * @summary Create user\n     * @param {User} body Created user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUser(body: User, options?: any) {\n        return UserApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Creates list of users with given input array\n     * @param {Array<User>} body List of user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUsersWithArrayInput(body: Array<User>, options?: any) {\n        return UserApiFp(this.configuration).createUsersWithArrayInput(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Creates list of users with given input array\n     * @param {Array<User>} body List of user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUsersWithListInput(body: Array<User>, options?: any) {\n        return UserApiFp(this.configuration).createUsersWithListInput(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Delete user\n     * @param {string} username The name that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public deleteUser(username: string, options?: any) {\n        return UserApiFp(this.configuration).deleteUser(username, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get user by user name\n     * @param {string} username The name that needs to be fetched. Use user1 for testing. \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public getUserByName(username: string, options?: any) {\n        return UserApiFp(this.configuration).getUserByName(username, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Logs user into the system\n     * @param {string} username The user name for login\n     * @param {string} password The password for login in clear text\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public loginUser(username: string, password: string, options?: any) {\n        return UserApiFp(this.configuration).loginUser(username, password, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Logs out current logged in user session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public logoutUser(options?: any) {\n        return UserApiFp(this.configuration).logoutUser(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Updated user\n     * @param {string} username name that need to be updated\n     * @param {User} body Updated user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public updateUser(username: string, body: User, options?: any) {\n        return UserApiFp(this.configuration).updateUser(username, body, options)(this.fetch, this.basePath);\n    }\n\n}\n\n",["211","212"],"/Volumes/Extreme SSD/myworkspace/petstore/src/services/pet/configuration.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/services/index.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/hooks/fetch-manager.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/store/fetch/reducer.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/hooks/redux-hooks.tsx",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/store/fetch/actions.ts",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/components/templates/Slim.tsx",["213","214","215"],"import React, { PropsWithChildren } from \"react\";\nimport { Box, Container, Flex, useColorMode } from \"@chakra-ui/react\";\nimport HeaderOrg from \"../organizms/Header\";\nimport DarkModeSwitch from \"../atoms/DarkModeSwitch\";\n\nfunction Slim({ children }: PropsWithChildren<{}>) {\n  return (\n    <Box>\n      <HeaderOrg />\n      <Container mt=\"10\">{children}</Container>\n    </Box>\n  );\n}\n\nexport default Slim;\n","/Volumes/Extreme SSD/myworkspace/petstore/src/components/organizms/Header.tsx",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/components/pages/Home.tsx",[],"/Volumes/Extreme SSD/myworkspace/petstore/src/components/atoms/DarkModeSwitch/index.js",["216"],"import React from 'react'\nimport DarkModeToggle from \"react-dark-mode-toggle\";\n\nexport default function (props) {\n  return <DarkModeToggle {...props} />;\n}\n",["217","218"],"/Volumes/Extreme SSD/myworkspace/petstore/src/components/organizms/Post.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/index.tsx",["219"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport App from \"./App\";\nimport { store } from \"store\";\nimport LightTheme from 'themes/lightTheme'\nimport reportWebVitals from \"./reportWebVitals\";\n\n\n\nReactDOM.render(\n  <ReduxProvider {...{ store }}>\n    <ChakraProvider resetCSS theme={LightTheme}>\n      <App />\n    </ChakraProvider>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["220","221"],"/Volumes/Extreme SSD/work/garcia/buyback/src/reportWebVitals.ts",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/App.tsx",["222"],"import React, { ReactElement } from \"react\";\nimport Home from \"./components/pages/Home\";\nimport \"./i18n\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","/Volumes/Extreme SSD/work/garcia/buyback/src/components/pages/Home.tsx",["223","224","225","226","227"],"import { Box, Container, Flex, Text } from \"@chakra-ui/react\";\nimport Timeline from \"components/molecules/Timeline\";\nimport Detail from \"components/organizms/Detail\";\nimport GeneralInfo from \"components/organizms/GeneralInfo\";\nimport ProcessList from \"components/organizms/ProcessList\";\nimport React from \"react\";\n\nfunction Home() {\n  return (\n    <Flex justifyContent=\"center\" alignItems=\"center\" w=\"100%\" h=\"100vh\">\n      <Container maxWidth=\"1100px\">\n        <ProcessList />\n      </Container>\n    </Flex>\n  );\n}\n\nexport default Home;\n","/Volumes/Extreme SSD/work/garcia/buyback/src/store/index.ts",["228"],"/Volumes/Extreme SSD/work/garcia/buyback/src/store/fetch/reducer.ts",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/store/app/reducer.ts",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/store/app/constants.ts",["229"],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/DarkModeSwitch/index.js",["230"],"/Volumes/Extreme SSD/work/garcia/buyback/src/themes/lightTheme/index.ts",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/Timeline.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/GeneralInfo.tsx",["231","232","233","234","235"],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/ShipmentCard.tsx",["236","237"],"import React from \"react\";\nimport { Flex, Box, Text, Image, Button } from \"@chakra-ui/react\";\nimport { CopyIcon } from \"@chakra-ui/icons\";\nimport Card from \"components/atoms/Card\";\nimport CopyButton from \"components/atoms/CopyButton\";\n\nconst suratKargoLogoSrc =\n  \"https://www.suratkargo.com.tr/assets/images/logo.png\";\n\nfunction ShipmentCard() {\n  return (\n    <Card w=\"100%\" minH=\"100px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Image src={suratKargoLogoSrc} alt=\"Kargo\" w=\"100px\" h=\"auto\" />\n        <Box py=\"2\" px=\"3\" bgColor=\"gray.200\" borderRadius=\"3xl\">\n          <Text fontSize=\"sm\" fontWeight=\"bold\">\n            Son 2 Gün\n          </Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"2\">\n        <Flex flexDir=\"column\">\n          <Text textTransform=\"uppercase\" color=\"gray.900\" fontSize=\"sm\">\n            Kargo Gönderi Kodu\n          </Text>\n          <Text fontWeight=\"semibold\" fontSize=\"lg\">\n            2323 2323 2323 1\n          </Text>\n        </Flex>\n        <CopyButton text=\"2323 2323 2323 1\" />\n      </Flex>\n      <Box>\n        <Text color=\"gray.700\" mt=\"5\" fontSize=\"sm\">\n          Paketinizi en geç <b>14 Haziran</b> tarihine\n          kadar ücretsiz kargo kodu ile birlikte kargoya teslim etmelisiniz.\n        </Text>\n      </Box>\n    </Card>\n  );\n}\n\nexport default ShipmentCard;\n","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/AskCard.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/Card.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/atoms/CopyButton.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/StatusMonitor.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/GiftCoupon.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/Detail.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/ProcessList.tsx",["238","239","240","241","242","243"],"import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n} from \"@chakra-ui/react\";\nimport ProcessRow from \"components/molecules/ProcessRow\";\nimport React from \"react\";\nimport Process from \"./Process\";\n\nfunction ProcessList() {\n  return (\n    <Accordion allowToggle>\n      <Process />\n      <Process />\n      <Process />\n    </Accordion>\n  );\n}\n\nexport default ProcessList;\n","/Volumes/Extreme SSD/work/garcia/buyback/src/components/molecules/ProcessRow.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/components/organizms/Process.tsx",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/hooks/text.ts",[],"/Volumes/Extreme SSD/work/garcia/buyback/src/i18n.ts",[],{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":1,"column":17,"nodeType":"250","messageId":"251","endLine":1,"endColumn":29},{"ruleId":"252","severity":1,"message":"253","line":23,"column":14,"nodeType":"250","messageId":"254","endLine":23,"endColumn":19},{"ruleId":"252","severity":1,"message":"255","line":2,"column":13,"nodeType":"250","messageId":"254","endLine":2,"endColumn":25},{"ruleId":"244","replacedBy":"256"},{"ruleId":"246","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":181,"column":18,"nodeType":"260","messageId":"261","endLine":181,"endColumn":32},{"ruleId":"258","severity":1,"message":"259","line":182,"column":20,"nodeType":"260","messageId":"261","endLine":182,"endColumn":36},{"ruleId":"258","severity":1,"message":"259","line":183,"column":21,"nodeType":"260","messageId":"261","endLine":183,"endColumn":38},{"ruleId":"258","severity":1,"message":"259","line":241,"column":21,"nodeType":"260","messageId":"261","endLine":241,"endColumn":38},{"ruleId":"258","severity":1,"message":"259","line":242,"column":19,"nodeType":"260","messageId":"261","endLine":242,"endColumn":34},{"ruleId":"258","severity":1,"message":"259","line":243,"column":16,"nodeType":"260","messageId":"261","endLine":243,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":363,"column":41,"nodeType":"260","messageId":"261","endLine":363,"endColumn":51},{"ruleId":"258","severity":1,"message":"259","line":566,"column":41,"nodeType":"260","messageId":"261","endLine":566,"endColumn":51},{"ruleId":"258","severity":1,"message":"259","line":1170,"column":41,"nodeType":"260","messageId":"261","endLine":1170,"endColumn":53},{"ruleId":"258","severity":1,"message":"259","line":1399,"column":41,"nodeType":"260","messageId":"261","endLine":1399,"endColumn":52},{"ruleId":"258","severity":1,"message":"259","line":1431,"column":41,"nodeType":"260","messageId":"261","endLine":1431,"endColumn":65},{"ruleId":"258","severity":1,"message":"259","line":1463,"column":41,"nodeType":"260","messageId":"261","endLine":1463,"endColumn":65},{"ruleId":"258","severity":1,"message":"259","line":1623,"column":41,"nodeType":"260","messageId":"261","endLine":1623,"endColumn":52},{"ruleId":"244","replacedBy":"262"},{"ruleId":"246","replacedBy":"263"},{"ruleId":"248","severity":1,"message":"264","line":2,"column":26,"nodeType":"250","messageId":"251","endLine":2,"endColumn":30},{"ruleId":"248","severity":1,"message":"265","line":2,"column":32,"nodeType":"250","messageId":"251","endLine":2,"endColumn":44},{"ruleId":"248","severity":1,"message":"266","line":4,"column":8,"nodeType":"250","messageId":"251","endLine":4,"endColumn":22},{"ruleId":"267","severity":1,"message":"268","line":4,"column":1,"nodeType":"269","endLine":6,"endColumn":2},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"270","line":4,"column":26,"nodeType":"250","messageId":"251","endLine":4,"endColumn":37},{"ruleId":"244","replacedBy":"271"},{"ruleId":"246","replacedBy":"272"},{"ruleId":"248","severity":1,"message":"249","line":1,"column":17,"nodeType":"250","messageId":"251","endLine":1,"endColumn":29},{"ruleId":"248","severity":1,"message":"273","line":1,"column":10,"nodeType":"250","messageId":"251","endLine":1,"endColumn":13},{"ruleId":"248","severity":1,"message":"274","line":1,"column":32,"nodeType":"250","messageId":"251","endLine":1,"endColumn":36},{"ruleId":"248","severity":1,"message":"275","line":2,"column":8,"nodeType":"250","messageId":"251","endLine":2,"endColumn":16},{"ruleId":"248","severity":1,"message":"276","line":3,"column":8,"nodeType":"250","messageId":"251","endLine":3,"endColumn":14},{"ruleId":"248","severity":1,"message":"277","line":4,"column":8,"nodeType":"250","messageId":"251","endLine":4,"endColumn":19},{"ruleId":"252","severity":1,"message":"253","line":23,"column":14,"nodeType":"250","messageId":"254","endLine":23,"endColumn":19},{"ruleId":"252","severity":1,"message":"255","line":2,"column":13,"nodeType":"250","messageId":"254","endLine":2,"endColumn":25},{"ruleId":"267","severity":1,"message":"268","line":4,"column":1,"nodeType":"269","endLine":6,"endColumn":2},{"ruleId":"248","severity":1,"message":"274","line":2,"column":15,"nodeType":"250","messageId":"251","endLine":2,"endColumn":19},{"ruleId":"248","severity":1,"message":"278","line":5,"column":8,"nodeType":"250","messageId":"251","endLine":5,"endColumn":15},{"ruleId":"248","severity":1,"message":"279","line":6,"column":8,"nodeType":"250","messageId":"251","endLine":6,"endColumn":21},{"ruleId":"248","severity":1,"message":"280","line":7,"column":8,"nodeType":"250","messageId":"251","endLine":7,"endColumn":12},{"ruleId":"248","severity":1,"message":"281","line":8,"column":8,"nodeType":"250","messageId":"251","endLine":8,"endColumn":18},{"ruleId":"248","severity":1,"message":"282","line":2,"column":34,"nodeType":"250","messageId":"251","endLine":2,"endColumn":40},{"ruleId":"248","severity":1,"message":"283","line":3,"column":10,"nodeType":"250","messageId":"251","endLine":3,"endColumn":18},{"ruleId":"248","severity":1,"message":"284","line":3,"column":3,"nodeType":"250","messageId":"251","endLine":3,"endColumn":18},{"ruleId":"248","severity":1,"message":"285","line":4,"column":3,"nodeType":"250","messageId":"251","endLine":4,"endColumn":16},{"ruleId":"248","severity":1,"message":"286","line":5,"column":3,"nodeType":"250","messageId":"251","endLine":5,"endColumn":16},{"ruleId":"248","severity":1,"message":"287","line":6,"column":3,"nodeType":"250","messageId":"251","endLine":6,"endColumn":17},{"ruleId":"248","severity":1,"message":"273","line":7,"column":3,"nodeType":"250","messageId":"251","endLine":7,"endColumn":6},{"ruleId":"248","severity":1,"message":"288","line":9,"column":8,"nodeType":"250","messageId":"251","endLine":9,"endColumn":18},"no-native-reassign",["289"],"no-negated-in-lhs",["290"],"@typescript-eslint/no-unused-vars","'ReactElement' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'store' is already defined.","redeclared","'SET_APP_NAME' is already defined.",["289"],["290"],"@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as",["289"],["290"],"'Flex' is defined but never used.","'useColorMode' is defined but never used.","'DarkModeSwitch' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'extendTheme' is defined but never used.",["289"],["290"],"'Box' is defined but never used.","'Text' is defined but never used.","'Timeline' is defined but never used.","'Detail' is defined but never used.","'GeneralInfo' is defined but never used.","'AskCard' is defined but never used.","'StatusMonitor' is defined but never used.","'Card' is defined but never used.","'GiftCoupon' is defined but never used.","'Button' is defined but never used.","'CopyIcon' is defined but never used.","'AccordionButton' is defined but never used.","'AccordionIcon' is defined but never used.","'AccordionItem' is defined but never used.","'AccordionPanel' is defined but never used.","'ProcessRow' is defined but never used.","no-global-assign","no-unsafe-negation"]